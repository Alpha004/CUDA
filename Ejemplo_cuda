!pip install nvcc4jupyter
%load_ext nvcc4jupyter

%%cuda
#include <iostream>
    int
    main()
{
    std::cout << "Welcome To GeeksforGeeks\n";
    return 0;
}


%%cuda
#include <stdio.h>
#include <cuda_runtime.h>
#include <sys/time.h>
#include <iostream>
using namespace std;

#define SIZE 1000000
#define SECOND_TO_MRCROSECOND (1000000)
#define NUM_BIN 256


__global__ void histogram_atomic(int *d_b, int *d_a)
{
	int tid = threadIdx.x + blockDim.x * blockIdx.x;
	int item = d_a[tid];
	if(tid < SIZE)
  {
		atomicAdd(&(d_b[item]), 1);
	}
}

int main()
{
	int h_a[SIZE];
	for(int i=0; i<SIZE; ++i)
  {
		h_a[i] = i%NUM_BIN;
  }
	int h_b[NUM_BIN];
	for(int i = 0; i<NUM_BIN; ++i)
  {
		h_b[i] = 0;
	}

	// Compute histogram by cpu
	struct timeval t_start, t_end;
	long cost_time = 0;

	int hist_cpu[NUM_BIN];
	for(int i = 0; i<NUM_BIN; ++i)
  {
		hist_cpu[i] = 0;
	}

	// inicia el temporizador
	gettimeofday(&t_start, NULL);
	for(int i = 0; i < SIZE; ++i)
  {
			hist_cpu[h_a[i]] +=1;
	}

	gettimeofday(&t_end, NULL);
	cost_time =  t_end.tv_usec-t_start.tv_usec + SECOND_TO_MRCROSECOND*(t_end.tv_sec-t_start.tv_sec);    // Cuenta en microsegundos
	std::cout << "the programme Cost time: " << cost_time/float(1.0)  << " us" << std::endl;

	// declare GPU memory pointers
	int *d_a;
	int *d_b;

	cudaEvent_t e_start, e_stop;
	cudaEventCreate(&e_start);
	cudaEventCreate(&e_stop);
	cudaEventRecord(e_start, 0);

	// allocate GPU memory
	cudaMalloc((void **)&d_a, SIZE*sizeof(int));
	cudaMalloc((void **)&d_b, NUM_BIN *sizeof(int));

	// transfer the arrays to the GPU
	cudaMemcpy(d_a, h_a, SIZE*sizeof(int), cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, h_b, NUM_BIN*sizeof(int), cudaMemcpyHostToDevice);

	//launch the kernel

	histogram_atomic <<<((SIZE+NUM_BIN-1)/NUM_BIN), NUM_BIN>>>(d_b, d_a);

	// copy back the sum from GPU
	cudaMemcpy(h_b, d_b, NUM_BIN*sizeof(int), cudaMemcpyDeviceToHost);

	cudaEventRecord(e_stop, 0);
	cudaEventSynchronize(e_stop);
	float elapsedTime;
	cudaEventElapsedTime(&elapsedTime, e_start, e_stop);
	printf("Time to compute histgram of %d numbers: %3.1f ms\n\n\n", SIZE, elapsedTime);

	for(int i = 0; i < NUM_BIN; i++)
  {
		printf("bin %d : count %d\n", i, h_b[i]);
	}


	// free GPU memory allocation
	cudaFree(d_a);
	cudaFree(d_b);

	return 0;

}
